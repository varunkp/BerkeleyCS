dim(m) = c(20,5)
ncols(m)
m.ncols
m.shape
m = 1:9
dim(m) = c(3,3)
m
apply(m,1,mean)
apply(m,2,mean)
mean(m)
m[c(2,3,1),c(3,2,1)]
E = c(1,0,0,-3,1,0,0,0,1)
dim(E) = c(3,3)
A = c(1,2,1,3,8,1,0,4,1)
dim(A) = c(3,3)
E %*% A
E * A
E = c(1,0,0,-3,1,0,0,0,1,byrows=T)
E
E = c(1,0,0,-3,1,0,0,0,1,byrows=T)
E = c(1,0,0,-3,1,0,0,0,1)
t(E)
E
dim(E)=c(3,3)
t(E)
t(E) %*% t(A)
A = 1:100
dim(A) = c(10,10)
A %*% A
A[1:5,1:5] %*% A[1:5,1:5] + A[1:5,6:10] %*% A[6:10,1:5]
A = 1:100
dim(A) = c(10,10)
B = seq(100,1,1)
B = seq(100,1,-1)
B
dim(B) = c(10,10)
A %*% B
A[1:5,1:5] %*% B[1:5,1:5] + A[1:5,6:10] %*% B[6:10,1:5]
A = 1:16
dim(A) = c(4,4)
B = seq(16,1,-1)
dim(B) = dim(A)
A %*% B
A[1:2,1:2] %*% B[1:2,1:2] + A[1:2,3:4] %*% B[3:4,1:2]
L = A[1:2,1:2] %*% B[1:2,1:2]
L + A[1:2,3:4] %*% B[3:4,1:2]
factorial(5)
e**2
math.e
exp**2
exp(2)
exp(1)
poisson <- function(lambda) {#
  p <- function(k) {#
    e = exp(lambda)#
    f = factorial(k)#
    g = lambda**k#
    g*e/f }#
  }
p = poisson(1)
v = 1:20
plot(v,p(v))
v = 0:20
plot(v,p(v))
poisson <- function(lambda) {#
  p <- function(k) {#
    e = exp(-lambda)#
    f = factorial(k)#
    g = lambda**k#
    g*e/f }#
  }
p = poisson(1)
plot(v,p(v))
plot(v, poisson(1)(v))
plot(v, poisson(1)(v),pch=16,col='red')
plot(v, poisson(1)(v),pch=16,col='red')#
points(v, poisson(4)(v),pch=16,col='darkgreen')#
points(v, poisson(10)(v),pch=16,col='black')
plot(v, poisson(1)(v),pch=16,col='red')#
points(v, poisson(4)(v),pch=16,col='blue')#
points(v, poisson(10)(v),pch=16,col='gray70')
points(v, poisson(10)(v),pch=16,col='gray60')
poisson <- function(lambda) {#
  p <- function(k) {#
    e = exp(-lambda)#
    f = factorial(k)#
    g = lambda**k#
    g*e/f }#
  }#
#
v = 0:20#
plot(v, poisson(1)(v),pch=16,col='red')#
points(v, poisson(4)(v),pch=16,col='blue')#
points(v, poisson(10)(v),pch=16,col='gray60')
plot(v, poisson(1)(v),pch=16,col='magenta')#
points(v, poisson(4)(v),pch=16,col='dodgerblue')#
points(v, poisson(10)(v),pch=16,col='black')
v = 0:20#
plot(v, poisson(1)(v),pch=16,col='red')#
points(v, poisson(4)(v),pch=16,col='dodgerblue')#
points(v, poisson(10)(v),pch=16,col='black')
plot(v, poisson(1)(v),pch=16,col='red',ylab='P(x)',xlab='x')#
points(v, poisson(4)(v),pch=16,col='dodgerblue')#
points(v, poisson(10)(v),pch=16,col='black')
u1 = c(0.8,0.3,0.2,0.7)
dim(u1) = c(2,2)
A = u1
A
u0 = c(1,0)
dim(u0) = c(2,0)
dim(u0) = c(2,1)
u0
A*u0
A %*% u0
u = u0
for (i in 1:7) { u = A %*% u;  print (u) }
rnorm(10)
library(Bolstad)
result = binobp(68,200,1,1)
result
class(result)
library(Bolstad)
result = binobp(68,200,1,1)
result$mean
class(result$mean)
A = seq(-100,100,by=0.1)#
cdf = pt(A,3)
A = seq(-5,5,by=1)#
cdf = pt(A,3)
cdf
A = seq(-5,5,by=1)#
pt(A,3)
A = seq(-5,5,by=1)
pt(A,3)
A = c(2.1,1.8,2.7,2.4)#
t.test(A, alternative=less)
t.test(A, alternative='less')
t.test(A, alternative='less',mu=3)
A = c(2.1,1.8,2.7,2.4)#
t.test(A, alternative='less',mu=3)
A = c(3.1,2.3,2.1,1.7)#
t.test(A, alternative='less',mu=3)
A = c(2.1,1.8,2.7,2.4)
A = c(3.1,2.3,2.1,1.7)#
t.test(A, alternative='less',mu=3)
X = c(3.1,2.3,2.1,1.7)
Y = c(3.1,4.3,4.1,2.7)
t.test(X,Y,alternative='two.sided')
X = c(3.1,2.3,2.1,1.7)#
Y = c(3.1,4.3,4.1,2.7)#
t.test(X,Y,alternative='two.sided')
t.test
help(t.test)
t.test(X,Y,alternative='two.sided',var.equal=True)
t.test(X,Y,alternative='two.sided',var.equal=TRUE)
t.test(X,Y,alternative='one.sided',var.equal=TRUE)
t.test(X,Y,alternative='less',var.equal=TRUE)
A = c(2.1,1.8,2.7,2.4)#
t.test(A, alternative='less',mu=3)
A = c(3.1,2.3,2.1,1.7)#
B = c(2.1,1.8,2.7,2.4)#
t.test(A, alternative='less',mu=3)#
t.test(B, alternative='less',mu=2)
t.test(B, alternative='less',mu=4)
A = c(3.1,2.3,2.1,1.7)#
B = c(2.1,1.8,2.7,2.4)#
t.test(A, alternative='less',mu=3)#
t.test(B, alternative='less',mu=3.5)
A = c(3.1,2.3,2.1,1.7)#
t.test(A, alternative='less',mu=3)#
B = c(2.1,1.8,2.7,2.4)#
t.test(B, alternative='less',mu=3.5)
A = c(3.1,2.3,2.1,1.7)#
B = c(3.1,4.3,4.1,2.7)#
t.test(X,Y,alternative='less',var.equal=TRUE)
t.test(A,B,alternative='less',var.equal=TRUE)
A = c(3.1,1.6,2.5,1.7)#
B = c(2.1,1.3,2.1,1/3)#
t.test(A,B,alternative='less',#
  paired=TRUE,var.equal=TRUE)
t.test(A,B,alternative='more',#
  paired=TRUE,var.equal=TRUE)
t.test(A,B,alternative='greater',#
  paired=TRUE,var.equal=TRUE)
A = c(2.1,1.3,2.1,1.3)#
B = c(3.1,1.6,2.5,1.7)#
t.test(A,B,alternative='less',#
  paired=TRUE,var.equal=FALSE)
t.test(A,B,alternative='less',#
  paired=TRUE,var.equal=TRUE)
random.normal(3,mu=3,sd=5)
norm
rnorm(3,mu=3,sd=5)
rnorm(3)
rnorm
df = 3
n = 3
rnorm(n,10,3)
t.test(A, alternative='less',mu=10)
A = rnorm(n,10,3)
t.test(A, alternative='less',mu=10)
result = t.test(A,alternative='less',mu=10)
result$t
result
result.t
t.test
help(t.test)
result$htest
result = t.test(A,alternative='less',mu=10)
result$htest
result.htest
class(result)
result$statistic
result$p.value
R code:#
A = c(3.1,2.3,2.1,1.7)#
B = c(3.1,4.3,4.1,2.7)#
t.test(A,B,alternative='less',var.equal=TRUE)#
t.test(A,B,alternative='less')
A = c(3.1,2.3,2.1,1.7)#
t.test(A, alternative='less',mu=3)#
B = c(2.1,1.8,2.7,2.4)#
t.test(B, alternative='less',mu=3.5)#
#
C = c(3.1,4.3,4.1,2.7)#
t.test(A,C,alternative='less',#
  paired=TRUE,var.equal=FALSE)#
t.test(A,C,alternative='less',var.equal=TRUE)
A = c(3.1,2.3,2.1,1.7)#
result = t.test(A, alternative='less',mu=3)#
result$statistic#
B = c(2.1,1.8,2.7,2.4)#
result=t.test(B, alternative='less',mu=3.5)#
result$statistic#
C = c(3.1,4.3,4.1,2.7)#
result=t.test(A,C,alternative='less',#
  paired=TRUE,var.equal=FALSE)#
result$statistic#
result=t.test(A,C,alternative='less',var.equal=TRUE)#
result$statistic
R code:#
A = c(3.1,2.3,2.1,1.7)#
result = t.test(A, alternative='less',mu=3)#
result$statistic#
B = c(2.1,1.8,2.7,2.4)#
result=t.test(B, alternative='less',mu=3.5)#
result$statistic#
C = c(3.1,4.3,4.1,2.7)#
result=t.test(A,C,alternative='less',#
  paired=TRUE,var.equal=FALSE)#
result$statistic#
result=t.test(A,C,alternative='less',var.equal=TRUE)#
result$statistic
A = c(3.1,2.3,2.1,1.7)#
result = t.test(A, alternative='less',mu=3)#
result$statistic#
B = c(2.1,1.8,2.7,2.4)#
result=t.test(B, alternative='less',mu=3.5)#
result$statistic#
C = c(3.1,4.3,4.1,2.7)#
result=t.test(A,C,alternative='less',#
  paired=TRUE,var.equal=FALSE)#
result$statistic#
result=t.test(A,C,alternative='less',var.equal=TRUE)#
result$statistic
f = wilcox_test
library(Bolstad)
wilcox.test
X = seq(0,5)
X
Y = seq(0,2,length=5)
Y
X + Y
X = seq(1,5)
X
Y = seq(0,2,length=5)
Y
X + Y
Z = X + Y
mean(Z)
X = seq(1,5)#
X#
Y = seq(0,2,length=5)#
Y#
Z = X + Y#
mean(Z)
Z
L = list(a=1:3, b="ciao", c = sqrt)#
L
m = np.arange(1,10)
m = 1:10
dim(m) = c(3,3)
m = 1:9
dim(m) = c(3,3)
m
X = seq(1,5)#
X#
Y = seq(0,2,length=5)#
Y#
Z = X + Y#
Z
Z
>>> cbind = robjects.r['cbind']#
>>> x = seq(4,1) + seq(2,5)#
>>> sample = robjects.r['sample']#
>>> y = sample(seq(1,50),8)#
>>> x#
<IntVector - Python:0x100568cf8 / R:0x1009fb6c8>#
>>> y#
<IntVector - Python:0x100570ef0 / R:0x1009649b8>#
>>> z = cbind(x,y)#
>>> z#
<Matrix - Python:0x100570cb0 / R:0x10359ec88>#
>>> print z#
     [,1] [,2]#
[1,]    4   47#
[2,]    3   16#
[3,]    2    9#
[4,]    1    4#
[5,]    2   38#
[6,]    3   10#
[7,]    4   48#
[8,]    5   43#
#
>>> #
>>> z.colnames#
<RObject - Python:0x100570e18 / R:0x1008dad78>#
>>> z.colnames = list('abcdefgh')#
Traceback (most recent call last):#
  File "<stdin>", line 1, in <module>#
AttributeError: can't set attribute
x = seq(4,1) + seq(2,5)
)
.
?
jlkj)
-
Î©
x = seq(4,1) + seq(2,5)
y = sample(seq(1,50),8)
x
y
x = c(seq(4,1),seq(2,5))
x
z = cbind(x,y)
z
dimnames(z) = c('abcdefgh')
env
environ
environment
environment()
library(ape)
environment
read.tree
version
type(True)
class(True)
kind(True)
True
T
class(T)
N = 500
A = runif(N)
dim(A) = 20,25
A = matrix(A,nrow=20)
hclust(A)
hclust(dist(A))
names(hclust(dist(A)))
result = hclust(dist(A))
result$order
nrows(M)
M.nrows()
M.nrows
A
A(order)
M(order)
A = runif(N)
A = matrix(A,nrow=20)
result = hclust(dist(A))
result.names
result$names
result
result.names
names(result)
result$order
M = A[result$order]
nrows(M)
M
M.nrows
help(hclust)
help(dist)
help(hclust)
setwd('Desktop/data')
setwd('Desktop/nj')#
data = read.table('data/nj_data.txt',head=F)#
colnames(data) = c('A','B','C','D','E','F')#
rownames(data) = c('A','B','C','D','E','F')#
# do not do:  dist(data) !!!#
d = as.dist(data)#
d#
library(ape)#
tr = nj(d)#
names(tr)#
tr$edge.length#
tr$edge#
tr$tip.label#
plot(tr,type='unrooted')
print tr
tr
summary(tr)
write.tr(tr)
write.tree(tr)
